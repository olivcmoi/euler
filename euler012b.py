#The sequence of triangle numbers is generated by adding the natural numbers. So the 7th triangle number would be 1 + 2 + 3 + 4 + 5 + 6 + 7 = 28. The first ten terms would be:
#1, 3, 6, 10, 15, 21, 28, 36, 45, 55, ...
#Let us list the factors of the first seven triangle numbers:
# 1: 1
# 3: 1,3
# 6: 1,2,3,6
#10: 1,2,5,10
#15: 1,3,5,15
#21: 1,3,7,21
#28: 1,2,4,7,14,28
#We can see that 28 is the first triangle number to have over five divisors.
#
#What is the value of the first triangle number to have over five hundred divisors?

def sieve_eratosthenes(limit):
	list = [];
	multiple = 0;
	list = range(0, limit);
	for i in list:
		if i >= 2:
			multiple = 2;
			while (i * multiple) < limit:
				list[i * multiple] = 0;
				multiple += 1;
	result = [];
	for i in list:
		if i > 1:
			result.append(i);
	return result;

n=3;	#start with a prime 
Dn=2;	#number of divisors for any prime 
cnt=0;	#to insure the while loop is entered 
n1=0;
Dn1=0;
i=0;
exponent=0;
primearray=sieve_eratosthenes(8751);
while cnt <= 500:
	n = n+1;
	n1 = n;
	if n1 % 2 == 0:
		n1 = n1/2;
	Dn1 = 1;
	for value in primearray:
		if pow(value,2) > n1:
			Dn1=2*Dn1;
			break; 
		#When the prime divisor would be greater than the residual n1, 
		#that residual n1 is the last prime factor with an exponent=1 
		#No necessity to identify it. 
		exponent=1;
		while n1 % value == 0:
			exponent += 1; 
			n1 = n1/value;
		if exponent > 1:
			Dn1=Dn1*exponent;
		if n1 == 1:
			break; 
	cnt = Dn*Dn1;
	Dn = Dn1;
print n*(n-1)/2, cnt;

